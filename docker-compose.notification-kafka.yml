version: "3.8"

services:
  kafka:
    image: docker.io/bitnami/kafka:3.8
    container_name: kafka
    volumes:
      - "kafka_data:/bitnami"
    networks:
      - linkedin-network
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT

  kafbat-ui:
    container_name: kafbat-ui
    image: ghcr.io/kafbat/kafka-ui:latest
    ports:
      - 8090:8080
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_KSQLDBSERVER: http://ksqldb0:8088

  notification-db:
    image: postgres
    container_name: notification-db
    environment:
      - POSTGRES_DB=ms_notificationsDB
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    networks:
      - linkedin-network
    volumes:
      - notification-db-data:/var/lib/postgresql/data

  notification-service:
    image: vishaltiwari95/linkedin-app/notification
    container_name: notification-service
    networks:
      - linkedin-network
    depends_on:
      - discovery-server
      - notification-db
      - kafka

networks:
  linkedin-network:

volumes:
  kafka_data:
  notification-db-data:
  posts-db-data:
  user-db-data:
  connections-db-data:
